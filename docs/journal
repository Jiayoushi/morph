Journal
  for mds

>>>>>>>>>>>>>>>>>> Basics <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

sync to disk every X second.

sync with remote storage when the logfile size reaches Y.
  open a new logfile named with increasing sequence number, switch to the new logfile. 
  close the current logfile. call fsync.
  read all the transactions that are synced to disk and send them to remote storage server.
  move the oldfile to another folder, and it will be deleted at some time later.

what does the journal send to remote storage server?
  The whole logfile.
the remote storage server is responsible to read out each block, each transaction, each handle, each entry
and then use the key, values inside entry to put into rocksdb


>>>>>>>>>>>>>>>>>> in-memory structure <<<<<<<<<<<<<<<<<<< 

[transaction][transaction][transaction]
  handle #0   handle #0     handle #0
  handle #1   handle #1
  handle #2   handle #2

// Each log handle represents a system call, such as mkdir, write...
LogHandle
  LogEntries------> LogEntry #0
                    LogEntry #1

>>>>>>>>>>>>>>>>>>>>> on-disk structure <<<<<<<<<<<<<<<<<
LogFile #0
LogFile #1
LogFile #2
...

LogFile
[txn #0][txn #1        ][padding][txn #2                                                                    ]
------------block size----------||---------block size----------||-------------- block size-------------||-------- block size

each transaction is represented as follows
[CRC (4B)][Size (2B)][Type (1B)][Payload]

Type is one of FULL, FIRST, MIDDLE, LAST

>>>>>>>>>>>>>>>>>>>>>> API <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

// 
LogHandle * start_transaction()


// 
end_transaction(LogHandle *)

// write all transactions currently in the memory to disk
// invoked every X seconds.
sync_with_disk()

